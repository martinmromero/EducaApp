# Generated by Django 4.2.20 on 2025-05-18 21:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Campus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Campuses',
            },
        ),
        migrations.CreateModel(
            name='CampusV2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre de la sede', max_length=255, verbose_name='Nombre de la Sede')),
                ('address', models.TextField(blank=True, help_text='Dirección completa de la sede', null=True, verbose_name='Dirección')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la sede está activa', verbose_name='Activa')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Sede V2',
                'verbose_name_plural': 'Sedes V2',
            },
        ),
        migrations.CreateModel(
            name='Career',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre completo de la carrera', max_length=255, unique=True, verbose_name='Nombre de la Carrera')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
            ],
            options={
                'verbose_name': 'Carrera',
                'verbose_name_plural': 'Carreras',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CareerSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.PositiveSmallIntegerField(blank=True, help_text='Semestre en que se cursa la materia', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Semestre')),
                ('is_optional', models.BooleanField(default=False, help_text='Indica si la materia es optativa', verbose_name='Optativa')),
                ('workload_hours', models.PositiveSmallIntegerField(blank=True, help_text='Horas totales de la materia', null=True, verbose_name='Carga horaria')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
            ],
            options={
                'verbose_name': 'Relación Carrera-Materia',
                'verbose_name_plural': 'Relaciones Carrera-Materias',
                'ordering': ['semester', 'subject__name'],
            },
        ),
        migrations.CreateModel(
            name='Contenido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='contenidos/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('isbn', models.CharField(blank=True, max_length=20, null=True)),
                ('edition', models.CharField(blank=True, max_length=50, null=True)),
                ('pages', models.PositiveIntegerField(blank=True, null=True)),
                ('publisher', models.CharField(blank=True, max_length=100, null=True)),
                ('year', models.PositiveIntegerField(blank=True, null=True)),
                ('chapter', models.CharField(blank=True, max_length=100, null=True, verbose_name='Capítulo (opcional)')),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Ej: Parcial 1 - Matemáticas', max_length=255, verbose_name='Título del examen')),
                ('instructions', models.TextField(blank=True, null=True, verbose_name='Instrucciones generales')),
                ('duration_minutes', models.PositiveIntegerField(default=60, verbose_name='Duración (minutos)')),
                ('is_published', models.BooleanField(default=False, verbose_name='Publicado')),
                ('career_name', models.CharField(max_length=255, verbose_name='Carrera')),
                ('year', models.IntegerField(verbose_name='Año')),
                ('exam_type', models.CharField(choices=[('final', 'Final'), ('parcial', 'Parcial')], max_length=10, verbose_name='Tipo de examen')),
                ('partial_number', models.CharField(blank=True, choices=[('1ro', 'Primer Parcial'), ('2do', 'Segundo Parcial'), ('3ro', 'Tercer Parcial'), ('4to', 'Cuarto Parcial')], max_length=10, null=True, verbose_name='Número de parcial')),
                ('exam_mode', models.CharField(choices=[('oral', 'Oral'), ('escrito', 'Escrito')], max_length=10, verbose_name='Modalidad de examen')),
                ('exam_group', models.CharField(choices=[('individual', 'Individual'), ('grupal', 'Grupal')], default='individual', max_length=10, verbose_name='Modalidad grupal')),
                ('shift', models.CharField(blank=True, choices=[('mañana', 'Mañana'), ('tarde', 'Tarde'), ('noche', 'Noche')], max_length=10, null=True, verbose_name='Turno')),
                ('resolution_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tiempo de resolución')),
                ('topics_to_evaluate', models.TextField(blank=True, null=True, verbose_name='Temas a evaluar')),
                ('notes_and_recommendations', models.TextField(blank=True, null=True, verbose_name='Notas y recomendaciones')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Plantilla de Examen',
                'verbose_name_plural': 'Plantillas de Examen',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolution_time_number', models.PositiveIntegerField(default=60, help_text='Valor numérico de la duración', verbose_name='Duración numérica')),
                ('resolution_time_unit', models.CharField(choices=[('minutes', 'Minutos'), ('hours', 'Horas'), ('days', 'Días')], default='minutes', max_length=10, verbose_name='Unidad de tiempo')),
                ('exam_group', models.CharField(help_text='Número o descripción de temas incluidos', max_length=100, verbose_name='Cantidad de temas')),
                ('year', models.PositiveIntegerField(verbose_name='Año académico')),
                ('exam_type', models.CharField(choices=[('parcial', 'Parcial'), ('final', 'Final'), ('recuperatorio', 'Recuperatorio'), ('practico', 'Práctico')], max_length=50, verbose_name='Tipo de examen')),
                ('partial_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Número de parcial')),
                ('exam_mode', models.CharField(choices=[('presencial', 'Presencial'), ('virtual', 'Virtual'), ('domiciliario', 'Domiciliario'), ('hibrido', 'Híbrido'), ('otro', 'Otro')], max_length=20, verbose_name='Modalidad de examen')),
                ('shift', models.CharField(choices=[('manana', 'Mañana'), ('tarde', 'Tarde'), ('noche', 'Noche')], max_length=50, verbose_name='Turno')),
                ('topics_to_evaluate', models.TextField(help_text='Listado de temas incluidos en el examen', verbose_name='Temas a evaluar')),
                ('notes_and_recommendations', models.TextField(blank=True, verbose_name='Notas y recomendaciones')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('institution_logo', models.ImageField(blank=True, null=True, upload_to='exam_templates/logos/')),
                ('custom_css', models.TextField(blank=True, help_text='CSS personalizado para la plantilla')),
            ],
            options={
                'verbose_name': 'Plantilla de examen',
                'verbose_name_plural': 'Plantillas de examen',
                'ordering': ['-created_at'],
                'permissions': [('can_share_template', 'Puede compartir plantillas')],
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(blank=True, max_length=10)),
            ],
            options={
                'verbose_name_plural': 'Faculties',
            },
        ),
        migrations.CreateModel(
            name='FacultyV2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre de la facultad', max_length=255, verbose_name='Nombre de la Facultad')),
                ('code', models.CharField(blank=True, help_text='Código de la facultad (opcional)', max_length=20, null=True, verbose_name='Código')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la facultad está activa', verbose_name='Activa')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Facultad V2',
                'verbose_name_plural': 'Facultades V2',
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='institution_logos/')),
            ],
        ),
        migrations.CreateModel(
            name='InstitutionCareer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
            ],
            options={
                'verbose_name': 'Relación Institución-Carrera',
                'verbose_name_plural': 'Relaciones Institución-Carreras',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Creación'), ('update', 'Actualización'), ('delete', 'Eliminación'), ('favorite', 'Favorito')], max_length=10)),
                ('details', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Log de Institución',
                'verbose_name_plural': 'Logs de Instituciones',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('is_core', models.BooleanField(default=True, help_text='Indica si es una materia troncal/obligatoria', verbose_name='Materia troncal')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
            ],
            options={
                'verbose_name': 'Relación Institución-Materia',
                'verbose_name_plural': 'Relaciones Institución-Materias',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionV2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre completo de la institución', max_length=255, verbose_name='Nombre')),
                ('logo', models.ImageField(blank=True, help_text='Subir imagen del logo institucional', null=True, upload_to='institution_logos_v2/', verbose_name='Logo')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la institución está activa en el sistema', verbose_name='Activa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
            ],
            options={
                'verbose_name': 'Institución V2',
                'verbose_name_plural': 'Instituciones V2',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('learning_outcomes', models.TextField(blank=True, null=True, verbose_name='Resultados de aprendizaje (opcional)')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'db_table': 'material_subjects',
            },
        ),
        migrations.CreateModel(
            name='UserInstitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_favorite', models.BooleanField(default=False)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='material.institutionv2')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nombre del Tema')),
                ('importance', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Importancia (1-5)')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='material.subject', verbose_name='Asignatura relacionada')),
            ],
        ),
        migrations.CreateModel(
            name='Subtopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nombre del Subtema')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='material.topic', verbose_name='Tema relacionado')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('opcion_multiple', 'Opción múltiple'), ('verdadero_falso', 'Verdadero/Falso'), ('desarrollo', 'Desarrollo')], default='opcion_multiple', max_length=20, verbose_name='Tipo de pregunta')),
                ('question_text', models.TextField(verbose_name='Texto de la pregunta')),
                ('answer_text', models.TextField(verbose_name='Texto de la respuesta')),
                ('question_image', models.ImageField(blank=True, help_text='Formatos: JPG, PNG, SVG', null=True, upload_to='questions/images/', verbose_name='Imagen de la pregunta (opcional)')),
                ('answer_image', models.ImageField(blank=True, help_text='Formatos: JPG, PNG, SVG', null=True, upload_to='answers/images/', verbose_name='Imagen de la respuesta (opcional)')),
                ('options_json', models.TextField(blank=True, null=True, verbose_name='Opciones (JSON)')),
                ('difficulty', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Dificultad (1-5)')),
                ('source_page', models.IntegerField(blank=True, null=True, verbose_name='Página de referencia')),
                ('unit', models.CharField(blank=True, max_length=100, null=True, verbose_name='Unidad (opcional)')),
                ('reference_book', models.CharField(blank=True, max_length=200, null=True, verbose_name='Libro/Documento (opcional)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contenido', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='preguntas', to='material.contenido', verbose_name='Contenido relacionado')),
                ('subject', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='material.subject', verbose_name='Materia')),
                ('subtopic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='material.subtopic', verbose_name='Subtema (opcional)')),
                ('topic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='material.topic', verbose_name='Tema principal')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Pregunta',
                'verbose_name_plural': 'Preguntas',
                'ordering': ['subject', 'topic', 'subtopic', 'difficulty'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('user', 'Usuario')], default='user', max_length=10)),
                ('institutions', models.ManyToManyField(blank=True, to='material.institution', verbose_name='Instituciones')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LearningOutcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('level', models.PositiveSmallIntegerField(help_text='Nivel de dominio (1: Básico, 2: Intermedio, 3: Avanzado)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outcomes', to='material.subject')),
            ],
        ),
        migrations.AddConstraint(
            model_name='institutionv2',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('name',), name='unique_active_institution_name'),
        ),
        migrations.AddField(
            model_name='institutionsubject',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='institution_subjects', to='material.institutionv2', verbose_name='Institución'),
        ),
        migrations.AddField(
            model_name='institutionsubject',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_institutions', to='material.subject', verbose_name='Materia'),
        ),
        migrations.AddField(
            model_name='institutionlog',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='material.institutionv2'),
        ),
        migrations.AddField(
            model_name='institutionlog',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='institutioncareer',
            name='career',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_institutions', to='material.career', verbose_name='Carrera'),
        ),
        migrations.AddField(
            model_name='institutioncareer',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='institution_careers', to='material.institutionv2', verbose_name='Institución'),
        ),
        migrations.AddField(
            model_name='institution',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='institutions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='facultyv2',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facultyv2_set', to='material.institutionv2', verbose_name='Institución'),
        ),
        migrations.AddField(
            model_name='faculty',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faculties', to='material.institution'),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='campus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='material.campusv2', verbose_name='Sede/Campus'),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='career',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='material.career', verbose_name='Carrera'),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_exam_templates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='faculty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='material.facultyv2', verbose_name='Facultad'),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='material.institutionv2', verbose_name='Institución'),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='learning_outcomes',
            field=models.ManyToManyField(to='material.learningoutcome', verbose_name='Resultados de aprendizaje'),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='professor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='professor_exam_templates', to=settings.AUTH_USER_MODEL, verbose_name='Profesor'),
        ),
        migrations.AddField(
            model_name='examtemplate',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='material.subject', verbose_name='Materia'),
        ),
        migrations.AddField(
            model_name='exam',
            name='campus',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='material.campus', verbose_name='Sede'),
        ),
        migrations.AddField(
            model_name='exam',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_templates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='exam',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='material.faculty', verbose_name='Facultad'),
        ),
        migrations.AddField(
            model_name='exam',
            name='institution',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='material.institution', verbose_name='Institución'),
        ),
        migrations.AddField(
            model_name='exam',
            name='learning_outcomes',
            field=models.ManyToManyField(blank=True, to='material.learningoutcome', verbose_name='Resultados de aprendizaje'),
        ),
        migrations.AddField(
            model_name='exam',
            name='professor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Profesor'),
        ),
        migrations.AddField(
            model_name='exam',
            name='questions',
            field=models.ManyToManyField(related_name='exams', to='material.question', verbose_name='Preguntas'),
        ),
        migrations.AddField(
            model_name='exam',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='material.subject', verbose_name='Materia'),
        ),
        migrations.AddField(
            model_name='exam',
            name='topics',
            field=models.ManyToManyField(blank=True, related_name='exams', to='material.topic', verbose_name='Temas evaluados'),
        ),
        migrations.AddField(
            model_name='contenido',
            name='subject',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='material.subject', verbose_name='Subject'),
        ),
        migrations.AddField(
            model_name='contenido',
            name='uploaded_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='careersubject',
            name='career',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_subjects', to='material.career', verbose_name='Carrera'),
        ),
        migrations.AddField(
            model_name='careersubject',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_careers', to='material.subject', verbose_name='Materia'),
        ),
        migrations.AddField(
            model_name='career',
            name='campus',
            field=models.ManyToManyField(blank=True, related_name='careers_campus', to='material.campusv2', verbose_name='Campus'),
        ),
        migrations.AddField(
            model_name='career',
            name='faculties',
            field=models.ManyToManyField(blank=True, related_name='careers', to='material.facultyv2', verbose_name='Facultades'),
        ),
        migrations.AddField(
            model_name='career',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='careers', to='material.subject', verbose_name='Materias'),
        ),
        migrations.AddField(
            model_name='campusv2',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campusv2_set', to='material.institutionv2', verbose_name='Institución'),
        ),
        migrations.AddField(
            model_name='campus',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campuses', to='material.institution'),
        ),
        migrations.AlterUniqueTogether(
            name='userinstitution',
            unique_together={('user', 'institution')},
        ),
        migrations.AlterUniqueTogether(
            name='topic',
            unique_together={('name', 'subject')},
        ),
        migrations.AlterUniqueTogether(
            name='subtopic',
            unique_together={('name', 'topic')},
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('contenido', 'source_page')},
        ),
        migrations.AlterUniqueTogether(
            name='learningoutcome',
            unique_together={('subject', 'code')},
        ),
        migrations.AlterUniqueTogether(
            name='institutionsubject',
            unique_together={('institution', 'subject')},
        ),
        migrations.AlterUniqueTogether(
            name='institutioncareer',
            unique_together={('institution', 'career')},
        ),
        migrations.AddConstraint(
            model_name='institution',
            constraint=models.CheckConstraint(check=models.Q(('name__gt', '')), name='non_empty_name'),
        ),
        migrations.AddConstraint(
            model_name='institution',
            constraint=models.UniqueConstraint(fields=('name', 'owner'), name='unique_institution_owner'),
        ),
        migrations.AddConstraint(
            model_name='facultyv2',
            constraint=models.UniqueConstraint(fields=('institution', 'name'), name='unique_faculty_name_per_institution'),
        ),
        migrations.AddConstraint(
            model_name='faculty',
            constraint=models.UniqueConstraint(fields=('name', 'institution'), name='unique_faculty_per_institution'),
        ),
        migrations.AddIndex(
            model_name='exam',
            index=models.Index(fields=['exam_type', 'year'], name='material_ex_exam_ty_f3f05a_idx'),
        ),
        migrations.AddIndex(
            model_name='exam',
            index=models.Index(fields=['subject'], name='material_ex_subject_530b79_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='careersubject',
            unique_together={('career', 'subject')},
        ),
        migrations.AddConstraint(
            model_name='campusv2',
            constraint=models.UniqueConstraint(fields=('institution', 'name'), name='unique_campus_name_per_institution'),
        ),
        migrations.AddConstraint(
            model_name='campus',
            constraint=models.UniqueConstraint(fields=('name', 'institution'), name='unique_campus_per_institution'),
        ),
    ]
